import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåô –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –°–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å...")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –•—Ä–∞–Ω–∏—Ç–µ–ª—å –°–Ω–æ–≤. –ü–æ–º–æ–≥–∞–µ—à—å —Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–Ω—ã."},
                {"role": "user", "content": user_text}
            ]
        )
        bot_reply = response["choices"][0]["message"]["content"]
    except Exception as e:
        bot_reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    await update.message.reply_text(bot_reply)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
